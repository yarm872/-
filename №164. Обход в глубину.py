'''Дан неориентированный невзвешенный граф. Для него вам необходимо найти количество вершин, лежащих в одной
компоненте связности с данной вершиной (считая эту вершину).

Входные данные В первой строке входных данных содержатся два числа: N и S (1 ≤ N ≤ 100; 1 ≤ S ≤ N),
где N – количество вершин графа, а S – заданная вершина. В следующих N строках записано по N чисел – матрица
смежности графа, в которой 0 означает отсутствие ребра между вершинами, а 1 – его наличие. Гарантируется,
что на главной диагонали матрицы всегда стоят нули.

Выходные данные
Выведите одно целое число – искомое количество вершин.
входные данные
3 1
0 1 1
1 0 0
1 0 0
выходные данные
3'''


def dfs(s):
    vis[s] = True
    for i in range(n):
        if a[s][i] != 0 and vis[i] == False:
            dfs(i)


n, s = map(int, input().split())
a = [list(map(int, input().split())) for i in range(n)]

vis = [False] * n
kol = 0
dfs(s - 1)

for i in vis:
    if i:
        kol += 1
print(kol)